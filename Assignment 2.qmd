---
title: "Assignment 2"
format: html
editor: visual
---

Libraries

```{r}
library(foreach)
library(doParallel)
library(iterators)
library(MASS)
library(parallel)


```

## Question 1

```{r}
N = 100 
n = 100

result <- foreach(i = 1:5, .combine = rbind) %do% { 
     sample <- rexp(n,rate=1)
     c(mean(sample),sd(sample))
} 


```

```{r}
#| echo: false

# Set column names
colnames(result) <- c("Mean", "SD")

# Set row names to simple numbers
rownames(result) <- 1:nrow(result)

# Print the result
knitr::kable(head(result), caption = "Summary Statistics of Exponential Samples - first 5 values")
```

## Question 2

```{r}
N = 10000

# Bootstrap with parallel processing
time1 <- system.time({

  # Set up parallel backend
  cl <- makeCluster(detectCores() - 1)  
  registerDoParallel(cl)
    
  boot_results_parallel <- foreach(i = 1:N, .combine = c, .packages = 'MASS') %dopar% {
    sample_data <- sample(galaxies, size = length(galaxies), replace = TRUE)
    median(sample_data)
  }
  
  stopCluster(cl)

})

# Serial version for comparison
time2 <- system.time({
  boot_results_serial <- replicate(N, {
    sample_data <- sample(galaxies, size = length(galaxies), replace = TRUE)
    median(sample_data)
  })
})
# Compare processing time
time1
time2

```

## Question 3

```{r}
set.seed(123)

# Function to compute percentile CI
bootstrap_CI <- function(sample_size = 50, B = 1000) {
  data <- rexp(sample_size, rate = 1)
  boot_medians <- replicate(B, {
    sample_data <- sample(data, size = sample_size, replace = TRUE)
    median(sample_data)
  })
  
  quantile(boot_medians, probs = c(0.025, 0.975)) # 95% CI
}

# Run in parallel
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)

CIs <- foreach(i = 1:1000, .combine = rbind) %dopar% {
  bootstrap_CI()
}

stopCluster(cl)

# Estimate coverage
coverage <- mean(CIs[,1] < 1 & CIs[,2] > 1)
print(coverage)

```

## Question 4

```{r}
set.seed(1234)
results <- foreach(i = 1:3, .combine = c) %do% {
  max(iterators::nextElem(iterators::irnorm(5)))
}

print(results)
```

## Question 5

```{r}

# Define task function
task_function <- function() {
  max(iterators::nextElem(iterators::irnorm(5)))
}

# Using parLapply
cl <- makeCluster(detectCores() - 1)

# Export function to workers
clusterExport(cl, "task_function")

# Run parallel computation
set.seed(1234)
system.time({
  results_parLapply <- parLapply(cl, 1:3, function(i) task_function())
})

# Stop cluster
stopCluster(cl)

# Using foreach
system.time({
  set.seed(1234)
  results_foreach <- foreach(i = 1:3, .combine = c) %do% {
    task_function()
  }
})

# Using replicate
system.time({
  set.seed(1234)
  results_replicate <- replicate(3, task_function())
})

results_parLapply
results_foreach
results_replicate
```
